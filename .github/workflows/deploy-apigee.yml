name: Deploy to Apigee

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      APIGEE_ENV: ${{ secrets.APIGEE_ENV }}
      JFROG_REPO_USER: ${{ secrets.JFROG_REPO_USER }}
      JFROG_REPO_PASS: ${{ secrets.JFROG_REPO_PASS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decode SA from base64
        run: |
         echo "${{ secrets.APIGEE_SA_BASE64 }}" | base64 --decode > /tmp/apigee-sa.json

      # Clean
      - name: Clean
        run: mvn clean -q
        working-directory: edge

      # Build proxy bundle
      - name: Build Proxy Bundle
        run: mvn package -q -Papigeex-apiproxy
        working-directory: edge

      # Static code analysis
      - name: Static Code Analysis, Unit Test, and Coverage (with HTML)
        run: |
          mvn test -q -Pproxy-unit-test
          npm install
          mkdir -p edge/target/unit-test-coverage-html
          npx istanbul cover --dir edge/target/unit-test-coverage-html node_modules/mocha/bin/_mocha test/unit --report html
        working-directory: edge

      # Apigeelint
      - name: Run ApigeeLint and Generate HTML Report
        run: |
          npm install -g apigeelint
          mkdir -p edge/target/apigeelint-report
          apigeelint -s edge/apiproxy -f html.js > edge/target/apigeelint-report/index.html || true
        continue-on-error: true

      # Pre-deploy prep
      - name: Pre-deploy Prep
        run: |
          echo "Using APIGEE_ENV=${{ secrets.APIGEE_ENV }}"
          mvn -q apigee-config:targetservers -Papigeex-apiproxy \
            -Dorg="${{ secrets.APIGEE_ORG }}" \
            -Denv="${{ secrets.APIGEE_ENV }}" \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update \
            -Dapigee.config.dir=resources/edge
        working-directory: edge

      # Deploy proxy bundle
      - name: Deploy Proxy Bundle
        run: |
          mvn -q io.apigee.build-tools.enterprise4g:apigee-edge-maven-plugin:2.1.0:deploy -Papigeex-apiproxy \
            -Dorg=${APIGEE_ORG} \
            -Denv=${APIGEE_ENV} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update
        working-directory: edge

      # Post-deploy
      - name: Post-deploy
        run: |
          if [ -f resources/edge/org/apiProducts.json ]; then
            echo "load api product for integration init"
            mvn -q apigee-config:apiproducts -Papigeex-apiproxy \
              -Dorg=${APIGEE_ORG} -Denv=${APIGEE_ENV} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developers.json ]; then
            echo "load api developer for integration init"
            mvn -q apigee-config:developers -Papigeex-apiproxy \
              -Dorg=${APIGEE_ORG} -Denv=${APIGEE_ENV} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developerApps.json ]; then
            echo "load api developer app for integration init"
            mvn -q apigee-config:apps -Papigeex-apiproxy \
              -Dorg=${APIGEE_ORG} -Denv=${APIGEE_ENV} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
            echo "export app key for integration init"
            mvn -q apigee-config:exportAppKeys -Papigeex-apiproxy \
              -Dorg=${APIGEE_ORG} -Denv=${APIGEE_ENV} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
        working-directory: edge

      # Upload artifact (to Maven repository, optional)
      - name: Deploy Maven Artifacts to JFrog
        run: mvn deploy -s ../.m2/cicd-settings.xml
        working-directory: edge

      # Step: Zip both reports
      - name: Zip ApigeeLint and Coverage Reports
        if: success()
        run: |
          mkdir -p edge/target/email-report
          cp -r edge/target/apigeelint-report edge/target/email-report/
          cp -r edge/target/unit-test-coverage-html edge/target/email-report/
          cd edge/target
          zip -r combined-report.zip email-report
        working-directory: .

      # Step: Send Final Email with Reports
      - name: Send Final CI Report via Outlook
        if: success()
        uses: mattnotmitt/send-email@v1
        with:
          server_address: smtp.office365.com
          server_port: 587
          username: ${{ secrets.OFFICE365_USER }}
          password: ${{ secrets.OFFICE365_PASS }}
          subject: "[CI/CD] Apigee & Coverage Reports - ${{ github.ref_name }}"
          to: smitar@sidgs.com
          from: ${{ secrets.OFFICE365_USER }}
          body: |
            Hello,

            âœ… This is the final CI/CD report for the `${{ github.repository }}` pipeline.

            Attached you will find:
            - ApigeeLint Report (`apigeelint-report/index.html`)
            - Code Coverage Report (`unit-test-coverage-html/index.html`)

            Regards,  
            GitHub Actions
          attachments: edge/target/combined-report.zip

      # Clean up service account file
      - name: Clean up Service Account file
        run: rm -f /tmp/apigee-sa.json