# File: .github/workflows/apigee-deploy.yaml

name: Apigee CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/*'
      - 'feature-*'
      - develop
      - 'release/*'
      - 'release-*'
      - main
  pull_request:
    branches:
      - develop
      - 'release/*'
      - 'release-*'
      - main

jobs:

  common-setup:
    name: Shared Setup
    runs-on: ubuntu-latest
    outputs:
      proxy-dir: edge
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decode Service Account
        run: echo "${{ secrets.APIGEE_SA_BASE64 }}" | base64 --decode > /tmp/apigee-sa.json

  ci-checks:
    name: CI Checks (Lint & Unit Tests)
    needs: common-setup
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/feature-') || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/release-') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Tests and Coverage
        run: |
          npm install
          echo "🔁 Running Mocha Tests with NYC for HTML coverage..."
          npx nyc --reporter=html --report-dir=target/unit-test-coverage-html mocha test/unit/*.js
          echo "✅ Coverage HTML generated at target/unit-test-coverage-html"
        working-directory: edge

      - name: Run ApigeeLint
        run: |
          npm install -g apigeelint
          mkdir -p target/apigeelint-report
          apigeelint -s apiproxy -f html.js > target/apigeelint-report/index.html || true
        working-directory: edge

      - name: Package Combined Report
        run: |
          mkdir -p target/email-report
          cp -r target/apigeelint-report target/email-report/ || echo "⚠️ Missing ApigeeLint"
          cp -r target/unit-test-coverage-html target/email-report/ || echo "⚠️ Missing Coverage"
          cd target && zip -r combined-report.zip email-report
        working-directory: edge

      - name: Upload Combined Report
        uses: actions/upload-artifact@v4
        with:
          name: apigee-lint-and-coverage
          path: edge/target/combined-report.zip


  deploy-to-dev:
    name: Deploy to Apigee Dev
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    env:
      APIGEE_ENV: ${{ secrets.APIGEE_ENV_DEV }}
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      JFROG_REPO_USER: ${{ secrets.JFROG_REPO_USER }}
      JFROG_REPO_PASS: ${{ secrets.JFROG_REPO_PASS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decode Service Account
        run: echo "${{ secrets.APIGEE_SA_BASE64 }}" | base64 --decode > /tmp/apigee-sa.json

      - name: Build Proxy Bundle
        run: mvn package -q -Papigeex-apiproxy
        working-directory: edge

      - name: Pre-deploy Prep
        run: |
          echo "Preparing configuration for Apigee Dev deployment"
          mvn -q apigee-config:targetservers -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update \
            -Dapigee.config.dir=resources/edge
        working-directory: edge

      - name: Deploy to Apigee Dev
        run: |
          mvn -q io.apigee.build-tools.enterprise4g:apigee-edge-maven-plugin:2.1.0:deploy -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update
        working-directory: edge

      - name: Post-deploy Setup
        run: |
          if [ -f resources/edge/org/apiProducts.json ]; then
            mvn -q apigee-config:apiproducts -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developers.json ]; then
            mvn -q apigee-config:developers -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developerApps.json ]; then
            mvn -q apigee-config:apps -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
            mvn -q apigee-config:exportAppKeys -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
        working-directory: edge

      - name: Upload Deployment Artifact
        run: mvn deploy -s ../.m2/cicd-settings.xml
        working-directory: edge

  deploy-to-stage:
    name: Deploy to Apigee Staging
    needs: ci-checks
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/release-')
    env:
      APIGEE_ENV: ${{ secrets.APIGEE_ENV_STAGE }}
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      JFROG_REPO_USER: ${{ secrets.JFROG_REPO_USER }}
      JFROG_REPO_PASS: ${{ secrets.JFROG_REPO_PASS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decode Service Account
        run: echo "${{ secrets.APIGEE_SA_BASE64 }}" | base64 --decode > /tmp/apigee-sa.json

      - name: Build Proxy Bundle
        run: mvn package -q -Papigeex-apiproxy
        working-directory: edge

      - name: Pre-deploy Prep
        run: |
          echo "Preparing configuration for Apigee Staging deployment"
          mvn -q apigee-config:targetservers -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update \
            -Dapigee.config.dir=resources/edge
        working-directory: edge

      - name: Deploy to Staging
        run: |
          mvn -q io.apigee.build-tools.enterprise4g:apigee-edge-maven-plugin:2.1.0:deploy -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update
        working-directory: edge

      - name: Post-deploy Setup
        run: |
          if [ -f resources/edge/org/apiProducts.json ]; then
            mvn -q apigee-config:apiproducts -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developers.json ]; then
            mvn -q apigee-config:developers -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developerApps.json ]; then
            mvn -q apigee-config:apps -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
            mvn -q apigee-config:exportAppKeys -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
        working-directory: edge

      - name: Upload Deployment Artifact
        run: mvn deploy -s ../.m2/cicd-settings.xml
        working-directory: edge

  deploy-to-prod:
    name: Deploy to Apigee Prod
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      APIGEE_ENV: ${{ secrets.APIGEE_ENV_PROD }}
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      JFROG_REPO_USER: ${{ secrets.JFROG_REPO_USER }}
      JFROG_REPO_PASS: ${{ secrets.JFROG_REPO_PASS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decode Service Account
        run: echo "${{ secrets.APIGEE_SA_BASE64 }}" | base64 --decode > /tmp/apigee-sa.json

      - name: Build Proxy Bundle
        run: mvn package -q -Papigeex-apiproxy
        working-directory: edge

      - name: Pre-deploy Prep
        run: |
          echo "Preparing configuration for Apigee Production deployment"
          mvn -q apigee-config:targetservers -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update \
            -Dapigee.config.dir=resources/edge
        working-directory: edge

      - name: Deploy to Production
        run: |
          mvn -q io.apigee.build-tools.enterprise4g:apigee-edge-maven-plugin:2.1.0:deploy -Papigeex-apiproxy \
            -Dorg=${{ env.APIGEE_ORG }} \
            -Denv=${{ env.APIGEE_ENV }} \
            -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
            -Dhosturl=https://apigee.googleapis.com \
            -Dapigee.config.options=update
        working-directory: edge

      - name: Post-deploy Setup
        run: |
          if [ -f resources/edge/org/apiProducts.json ]; then
            mvn -q apigee-config:apiproducts -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developers.json ]; then
            mvn -q apigee-config:developers -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
          if [ -f resources/edge/org/developerApps.json ]; then
            mvn -q apigee-config:apps -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
            mvn -q apigee-config:exportAppKeys -Papigeex-apiproxy \
              -Dorg=${{ env.APIGEE_ORG }} -Denv=${{ env.APIGEE_ENV }} \
              -Dapigee.serviceaccount.file=/tmp/apigee-sa.json \
              -Dapigee.config.options=update
          fi
        working-directory: edge

      - name: Upload Deployment Artifact
        run: mvn deploy -s ../.m2/cicd-settings.xml
        working-directory: edge